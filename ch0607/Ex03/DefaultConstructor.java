package ch0607.Ex03;

//기본 생성자. 클래스 A는 기본생성자 생략되어 있음
//일반적으로 클래스 블럭
//1. 필드 2. 생성자 3. 메소드 4. 이너클래스
//생성자의 역할 1. 객체 생성 2. 필드의 값을 초기화
class A{
	int m; //필드(클래스 블럭에 선언된 변수): 데이터 타입 변수명
			//힙 영역에 저장, 객체화 시켜야 사용가능 . 예외)static
		//힙 영역의 ram에는 반드시 초기값이 들어가야 한다
//	A () { } //기본 생성자: 클래스 이름과 동일하면서 리턴타입이 없는 메소드를 생성자라 호칭한다.
		//기본 생성자는 생략 가능
		//기본 생성자는 매개변수도 없고 실행부도 가지지 않는 생성자
	void work() { //메소드: 리턴 타입 메소드명 (인풋 매개변수) {실행부}
					//메소드 호출:work()
		System.out.println(m); //m: 메모리의 값을 가지고 온다
	}
}
class B{
	int m; //m은 힙 영역에 저장. 기본값 0
	B(){} //기본 생성자는 생략 가능. 객체의 필드의 초기값을 기본값으로 출력 
	void work() {
		System.out.println(m); //메모리의 초기값으로 0을 출력
	}
}
//객체 생성시 생성자를 통해서 필드의 초기값을 할당하고 객체 생성
class C{
	int m;
	//기본 생성자는 생략됨. 다른 생성자가 존재하는 경우 외부에서 기본 생성자 호출 시 기본 생성자는 생략되면 안됨
	C(int c){ //생성자의 인풋값을 받앙서 메모리의 기본값으로 m변수 값을 불러온다
		m=c;
	}
	void work() {
		System.out.println(m); //객체 생성 시 생성자에 정수 값을 넣어서 필드 m을 초기화시킨다
	}
}
class D {
	int m,n,l;
	D(){} //기본 생성자
	D(int m, int n){ //매개변수 2개
		this.m=m; //this:자기 자신의 객체. 지역변수가 아닌 필드를 가리켜줌
		this.n=n;
	}
	D(int a, int b, int c){ //매개변수가 3개인 생성자
		m=a;
		n=b;
		l=c;
	}
	void work() { //work() 호출 시 각각의 메모리의 값을 출력
		System.out.println("m: "+m+", n: "+n+", l: "+l);
	}
}


public class DefaultConstructor {

	public static void main(String[] args) {
		//클래스 내에 올 수 있는 것 1. 필드 2. 메소드 3. 생성자 4. 이너클래스
		//생성자의 2가지 특징: 1. 클래스의 이름과 동일한 이름을 가진 메소드를 생성자라고 함
		//				   2. 생성자는 반환 타입이 없다
		//생성자를 사용하는 이유: 객체를 생성할 때 필드의 값을 초기화 하면서 객체를 생성하고자할 때 사용
		//클래스 내에서 필드의 초가값은 일반적으로 할당하지 않음
		//클래스의 객체를 생성할 때 초기값을 할당하면서 객체를 생성할 때 생성자 사용
		//객체를 생성할 때 반드시 생성자를 호출    A a=new A();
		//기본 생성자 Default Constructor: 
		//매개변수가 없는 생성자. 실행부의 값도 비어있는 상태의 생성자
		//기본 생성자는 생략 가능
		//생략되어있을 경우 컴파일러가 자동으로 생성해서 컴파일
		//클래스 내의 기본 생성자 이외의 다른 생성자가 존재하는 경우 기본 생성자 호출 시 생략 불가
		
		A a=new A(); //기본 생성자 호출. 객체 생성 시 반드시 생성자를 호출해야 한다. 컴파일러가 기본 생성자를 할당
		a.work();
		
		B b=new B();
		b.work(); //객체의 초기값 출력
		
		C c=new C(3); //생성자 호출 시 기본값을 인풋해서 메모리 필드에 초기값 구성 
		c.work(); //객체 생성시 기본 기능: 객체 생성과 필드의 값을 초기화
		
		C cc=new C(5);
		cc.work();
		//class C는 기본 생성자가 생략되어있음
		//class C는 매개변수가 하나인 생성자가 존재
		
//		C ccc=new C(); //오류 발생-기본 생성자가 생략되어있는데 다른 생성자가 존재함
		
		D d=new D(); //기본 생성자 호츨. 객체의 필드 초기값(m: 0, n: 0, l: 0)
		d.work();
		D dd=new D(2,5,7); //매개변수가 3개인 생성자 호출
		dd.work();
		D ddd=new D(1,2); //매개변수가 2개인 생성자 호출
		ddd.work();
		
		//생성자: 메소드 이름이 객체 이름과 동일하고 리턴값이 없는 메소드
		//객체 내의 필드의 값을 초기화할 때 오버로딩에 의해서 해당 생성자가 호출
		//오버로딩: 메소드명(생성자명,데이터타입,매개변수 개수) <==시그니처(식별자)
		//오류가 발생되는 경우: 동일한 데이터 타입, 매개변수의 타입과 개수
		
	}

}
